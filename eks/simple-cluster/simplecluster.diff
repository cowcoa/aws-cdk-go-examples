diff --git a/eks/simple-cluster/cdk-cli-wrapper-dev.sh b/eks/simple-cluster/cdk-cli-wrapper-dev.sh
index 58a1efb..97a0fc9 100755
--- a/eks/simple-cluster/cdk-cli-wrapper-dev.sh
+++ b/eks/simple-cluster/cdk-cli-wrapper-dev.sh
@@ -8,7 +8,7 @@ CDK_ACC="$(aws sts get-caller-identity --output text --query 'Account')"
 CDK_REGION="$(jq -r .context.deploymentRegion ./cdk.json)"
 
 # Check execution env.
-if [ -z $CODEBUILD_BUILD_ID ]
+if [ -z "$CODEBUILD_BUILD_ID" ]
 then
     if [ -z "$CDK_REGION" ]; then
         CDK_REGION="$(aws configure get region)"
@@ -26,22 +26,26 @@ fi
 # Destroy pre-process.
 if [ "$CDK_CMD" == "destroy" ]; then
     # Remove PVRE hook auto-added policy before executing destroy.
-    node_role_name="$(jq -r .context.stackName ./cdk.json)-$(jq -r .context.targetArch ./cdk.json)-ClusterNodeRole"
-    aws iam detach-role-policy --role-name $node_role_name --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
+    node_role_name="$(jq -r .context.stackName ./cdk.json)-$(jq -r .context.targetArch ./cdk.json)-${CDK_REGION}-ClusterNodeRole"
+    policy_arn="$(aws iam list-attached-role-policies --role-name ${node_role_name} --query 'AttachedPolicies[?PolicyName==`AmazonSSMManagedInstanceCore`].PolicyArn' --output text)"
+
+    if [ ! -z "$policy_arn" ]; then
+        aws iam detach-role-policy --role-name $node_role_name --policy-arn $policy_arn
+    fi
 fi
 
 # CDK command.
 # Valid deploymentStage are: [DEV, PROD]
-set -- "$@" "-c" "deploymentStage=DEV" "--outputs-file" "${SHELL_PATH}/cdk.out/cluster-info.json"
+set -- "$@" "-c" "deploymentStage=PROD" "--outputs-file" "${SHELL_PATH}/cdk.out/cluster-info.json"
 $SHELL_PATH/cdk-cli-wrapper.sh ${CDK_ACC} ${CDK_REGION} "$@"
 cdk_exec_result=$?
 
 # CDK command post-process.
-init_state_file=$SHELL_PATH/cdk.out/init.state
+eks_cluster_name="$(jq -r .context.clusterName ./cdk.json)-$(jq -r .context.targetArch ./cdk.json)"
+init_state_file=$SHELL_PATH/cdk.out/init-state.${CDK_REGION}-${eks_cluster_name}
 if [ $cdk_exec_result -eq 0 ] && [ "$CDK_CMD" == "deploy" ] && [ ! -f "$init_state_file" ]; then
     # Update kubeconfig
     echo "Update kubeconfig..."
-    eks_cluster_name="$(jq -r .context.clusterName ./cdk.json)-$(jq -r .context.targetArch ./cdk.json)"
     aws eks update-kubeconfig --region ${CDK_REGION} --name ${eks_cluster_name}
 
     # Add the following annotation to your service accounts to use the AWS Security Token Service AWS Regional endpoint, rather than the global endpoint.
@@ -65,5 +69,5 @@ fi
 
 # Destroy post-process.
 if [ $cdk_exec_result -eq 0 ] && [ "$CDK_CMD" == "destroy" ]; then
-    rm -rf $SHELL_PATH/cdk.out/
+    rm -rf $init_state_file
 fi
diff --git a/eks/simple-cluster/cdk.json b/eks/simple-cluster/cdk.json
index 74e5455..c861040 100644
--- a/eks/simple-cluster/cdk.json
+++ b/eks/simple-cluster/cdk.json
@@ -25,11 +25,13 @@
     ],
     "stackName": "CDKGoExample-EKSCluster",
     "deploymentRegion": "",
-    "targetArch": "amd64",
+    "targetArch": "arm64",
     "clusterName": "CDKGoExample-EKSCluster",
     "keyPairName": "",
     "masterUsers": [
+      "Cow",
+      "CowAdmin"
     ],
-    "externalDnsRole": "arn:aws:iam::123456789012:role/AWSIsengardAccount-EKSExternalDNSRole"
+    "externalDnsRole": "arn:aws:iam::027226252545:role/AWSIsengardAccount-EKSExternalDNSRole"
   }
 }
diff --git a/eks/simple-cluster/cdk_main.go b/eks/simple-cluster/cdk_main.go
index 3146ab7..318f0e7 100644
--- a/eks/simple-cluster/cdk_main.go
+++ b/eks/simple-cluster/cdk_main.go
@@ -139,7 +139,7 @@ func createEksCluster(stack awscdk.Stack, vpc awsec2.Vpc) awseks.Cluster {
 			awsiam.ManagedPolicy_FromAwsManagedPolicyName(jsii.String("AmazonEKSWorkerNodePolicy")),
 			awsiam.ManagedPolicy_FromAwsManagedPolicyName(jsii.String("AmazonEC2ContainerRegistryReadOnly")),
 		},
-		RoleName: jsii.String(*stack.StackName() + "-ClusterNodeRole"),
+		RoleName: jsii.String(*stack.StackName() + "-" + *stack.Region() + "-ClusterNodeRole"),
 	})
 
 	// Get key-pair pointer.
diff --git a/eks/simple-cluster/constructs/addons/ebs-csi-driver.go b/eks/simple-cluster/constructs/addons/ebs-csi-driver.go
index af9d4e9..7f5521f 100644
--- a/eks/simple-cluster/constructs/addons/ebs-csi-driver.go
+++ b/eks/simple-cluster/constructs/addons/ebs-csi-driver.go
@@ -193,65 +193,65 @@ func NewEksEbsCsiDriver(stack awscdk.Stack, cluster awseks.Cluster) {
 	})
 
 	// For arm64/aarch64 cluster
-	ebsCsiSa := awseks.NewServiceAccount(stack, jsii.String("EBSCSIDriverSA"), &awseks.ServiceAccountProps{
-		Name:      jsii.String("ebs-csi-controller-sa"),
-		Cluster:   cluster,
-		Namespace: jsii.String("kube-system"),
-	})
-
-	awsiam.NewPolicy(stack, jsii.String("EBSCSIDriverPolicy"), &awsiam.PolicyProps{
-		Document:   ebsCsiPolicy,
-		PolicyName: jsii.String(*stack.StackName() + "-AmazonEKS_EBS_CSI_Driver_Policy"),
-		Roles: &[]awsiam.IRole{
-			ebsCsiSa.Role(),
-		},
-	})
+	/*
+		ebsCsiSa := awseks.NewServiceAccount(stack, jsii.String("EBSCSIDriverSA"), &awseks.ServiceAccountProps{
+			Name:      jsii.String("ebs-csi-controller-sa"),
+			Cluster:   cluster,
+			Namespace: jsii.String("kube-system"),
+		})
 
-	// https://github.com/kubernetes-sigs/aws-ebs-csi-driver/tree/master/charts/aws-ebs-csi-driver
-	ebsCsiChart := awseks.NewHelmChart(stack, jsii.String("EBSCSIDriverChart"), &awseks.HelmChartProps{
-		Repository:      jsii.String("https://kubernetes-sigs.github.io/aws-ebs-csi-driver"),
-		Release:         jsii.String("aws-ebs-csi-driver"),
-		Cluster:         cluster,
-		Chart:           jsii.String("aws-ebs-csi-driver"),
-		Namespace:       jsii.String("kube-system"),
-		CreateNamespace: jsii.Bool(true),
-		Wait:            jsii.Bool(true),
-		Version:         jsii.String("2.6.4"),
-		Values: &map[string]interface{}{
-			"controller": map[string]map[string]interface{}{
-				"serviceAccount": {
-					"create": jsii.Bool(false),
-					"name":   ebsCsiSa.ServiceAccountName(),
-				},
-				"extraVolumeTags": {
-					"eks:cluster-name": cluster.ClusterName(),
-				},
+		awsiam.NewPolicy(stack, jsii.String("EBSCSIDriverPolicy"), &awsiam.PolicyProps{
+			Document:   ebsCsiPolicy,
+			PolicyName: jsii.String(*stack.StackName() + "-AmazonEKS_EBS_CSI_Driver_Policy"),
+			Roles: &[]awsiam.IRole{
+				ebsCsiSa.Role(),
 			},
-		},
-	})
-	ebsCsiChart.Node().AddDependency(ebsCsiSa)
+		})
 
-	/*
-		// For x86_64/amd64 cluster
-		ebsCsiRole := awsiam.NewRole(stack, jsii.String("EBSCSIDriverRole"), &awsiam.RoleProps{
-			RoleName: jsii.String(*stack.StackName() + "-AmazonEKS_EBS_CSI_DriverRole"),
-			AssumedBy: awsiam.NewWebIdentityPrincipal(cluster.OpenIdConnectProvider().OpenIdConnectProviderArn(), &map[string]interface{}{
-				"StringEquals": awscdk.NewCfnJson(stack, jsii.String("CfnJson-EBSCSIDriverRole"), &awscdk.CfnJsonProps{
-					Value: map[string]string{
-						*cluster.OpenIdConnectProvider().OpenIdConnectProviderIssuer() + ":sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa",
+		// https://github.com/kubernetes-sigs/aws-ebs-csi-driver/tree/master/charts/aws-ebs-csi-driver
+		ebsCsiChart := awseks.NewHelmChart(stack, jsii.String("EBSCSIDriverChart"), &awseks.HelmChartProps{
+			Repository:      jsii.String("https://kubernetes-sigs.github.io/aws-ebs-csi-driver"),
+			Release:         jsii.String("aws-ebs-csi-driver"),
+			Cluster:         cluster,
+			Chart:           jsii.String("aws-ebs-csi-driver"),
+			Namespace:       jsii.String("kube-system"),
+			CreateNamespace: jsii.Bool(true),
+			Wait:            jsii.Bool(true),
+			Version:         jsii.String("2.6.4"),
+			Values: &map[string]interface{}{
+				"controller": map[string]map[string]interface{}{
+					"serviceAccount": {
+						"create": jsii.Bool(false),
+						"name":   ebsCsiSa.ServiceAccountName(),
 					},
-				}),
-			}),
-			InlinePolicies: &map[string]awsiam.PolicyDocument{
-				"AmazonEKS_EBS_CSI_Driver_Policy": ebsCsiPolicy,
+					"extraVolumeTags": {
+						"eks:cluster-name": cluster.ClusterName(),
+					},
+				},
 			},
 		})
-
-		awseks.NewCfnAddon(stack, jsii.String("EBSCSIDriverAddon"), &awseks.CfnAddonProps{
-			AddonName:             jsii.String("aws-ebs-csi-driver"),
-			ClusterName:           cluster.ClusterName(),
-			ServiceAccountRoleArn: ebsCsiRole.RoleArn(),
-			AddonVersion:          jsii.String("v1.4.0-eksbuild.preview"),
-		})
+		ebsCsiChart.Node().AddDependency(ebsCsiSa)
 	*/
+
+	// For x86_64/amd64 cluster
+	ebsCsiRole := awsiam.NewRole(stack, jsii.String("EBSCSIDriverRole"), &awsiam.RoleProps{
+		RoleName: jsii.String(*stack.StackName() + "-" + *stack.Region() + "-AmazonEKSEBSCSIRole"),
+		AssumedBy: awsiam.NewWebIdentityPrincipal(cluster.OpenIdConnectProvider().OpenIdConnectProviderArn(), &map[string]interface{}{
+			"StringEquals": awscdk.NewCfnJson(stack, jsii.String("CfnJson-EBSCSIDriverRole"), &awscdk.CfnJsonProps{
+				Value: map[string]string{
+					*cluster.OpenIdConnectProvider().OpenIdConnectProviderIssuer() + ":sub": "system:serviceaccount:kube-system:ebs-csi-controller-sa",
+				},
+			}),
+		}),
+		InlinePolicies: &map[string]awsiam.PolicyDocument{
+			"AmazonEKS_EBS_CSI_Driver_Policy": ebsCsiPolicy,
+		},
+	})
+
+	awseks.NewCfnAddon(stack, jsii.String("EBSCSIDriverAddon"), &awseks.CfnAddonProps{
+		AddonName:             jsii.String("aws-ebs-csi-driver"),
+		ClusterName:           cluster.ClusterName(),
+		ServiceAccountRoleArn: ebsCsiRole.RoleArn(),
+		AddonVersion:          jsii.String("v1.10.0-eksbuild.1"),
+	})
 }
diff --git a/eks/simple-cluster/constructs/addons/kube-proxy.go b/eks/simple-cluster/constructs/addons/kube-proxy.go
index 6feda2d..7e9cd27 100644
--- a/eks/simple-cluster/constructs/addons/kube-proxy.go
+++ b/eks/simple-cluster/constructs/addons/kube-proxy.go
@@ -12,6 +12,6 @@ func NewEksKubeProxy(stack awscdk.Stack, cluster awseks.Cluster) {
 		AddonName:        jsii.String("kube-proxy"),
 		ResolveConflicts: jsii.String("OVERWRITE"),
 		ClusterName:      cluster.ClusterName(),
-		AddonVersion:     jsii.String("v1.21.2-eksbuild.2"),
+		AddonVersion:     jsii.String("v1.21.14-eksbuild.2"),
 	})
 }
diff --git a/eks/simple-cluster/constructs/addons/vpc-cni.go b/eks/simple-cluster/constructs/addons/vpc-cni.go
index cf994f2..04c6f88 100644
--- a/eks/simple-cluster/constructs/addons/vpc-cni.go
+++ b/eks/simple-cluster/constructs/addons/vpc-cni.go
@@ -10,7 +10,7 @@ import (
 // Install VPC CNI add-on
 func NewEksVpcCni(stack awscdk.Stack, cluster awseks.Cluster) {
 	cniRole := awsiam.NewRole(stack, jsii.String("VPCCNIRole"), &awsiam.RoleProps{
-		RoleName: jsii.String(*stack.StackName() + "-AmazonEKSVPCCNIRole"),
+		RoleName: jsii.String(*stack.StackName() + "-" + *stack.Region() + "-AmazonEKSVPCCNIRole"),
 		AssumedBy: awsiam.NewWebIdentityPrincipal(cluster.OpenIdConnectProvider().OpenIdConnectProviderArn(), &map[string]interface{}{
 			"StringEquals": awscdk.NewCfnJson(stack, jsii.String("CfnJson-VPCCNIRole"), &awscdk.CfnJsonProps{
 				Value: map[string]string{
@@ -27,7 +27,7 @@ func NewEksVpcCni(stack awscdk.Stack, cluster awseks.Cluster) {
 		AddonName:             jsii.String("vpc-cni"),
 		ResolveConflicts:      jsii.String("OVERWRITE"),
 		ClusterName:           cluster.ClusterName(),
-		AddonVersion:          jsii.String("v1.10.2-eksbuild.1"),
+		AddonVersion:          jsii.String("v1.11.2-eksbuild.1"),
 		ServiceAccountRoleArn: cniRole.RoleArn(),
 	})
 }
